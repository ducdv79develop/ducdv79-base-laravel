<?php

namespace Modules;

use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\ServiceProvider;
use Modules\Finance\Providers\FinanceServiceProvider;
use Modules\Order\Providers\OrderEventServiceProvider;
use Modules\Order\Providers\OrderServiceProvider;
use Modules\Product\Providers\ProductServiceProvider;

class ModuleServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     * @return void
     */
    public function register()
    {
        parent::register(); // TODO: Change the autogenerated stub
    }

    /**
     * Module load the application services.
     */
    public function boot()
    {
        $listModule = array_map('basename', File::directories(__DIR__));
        foreach ($listModule as $module) {
            if ($module === 'AbstractModules') continue;
            $this->registerConfig($module);
            $this->registerHelpers($module);
            $this->registerViews($module);
            $this->registerTranslations($module);
            $this->registerRoutes($module);
            if (File::exists(module_path($module, 'Database/migrations'))) {
                $this->loadMigrationsFrom(module_path($module, 'Database/migrations'));
            }
        }
        $this->registerProvider();
    }

    public function registerProvider()
    {
        // Module provider register the application services.
    }

    public function registerConfig($moduleName)
    {
        if (File::exists(module_path($moduleName, 'Config/config.php'))) {
            $this->publishes([
                module_path($moduleName, 'Config/config.php') => config_path("$moduleName.php"),
            ], 'config');
            $this->mergeConfigFrom(module_path($moduleName, 'Config/config.php'), $moduleName . '::config');
        }
    }

    public function registerHelpers($moduleName)
    {
        $helperDir = File::allFiles(module_path($moduleName, 'Helpers'));
        foreach ($helperDir as $key => $value) {
            $file = $value->getPathName();
            require_once $file;
        }
    }

    public function registerViews($moduleName)
    {
        $viewPath = resource_path("views/modules/$moduleName");
        $sourcePath = module_path($moduleName, 'Resources/views');
        $this->publishes([
            $sourcePath => $viewPath
        ], ['views', "$moduleName-module-views"]);
        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths($moduleName), [$sourcePath]), $moduleName);
    }

    public function registerTranslations($moduleName)
    {
        $langPath = resource_path("lang/modules/$moduleName");
        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $moduleName);
        } else {
            $this->loadTranslationsFrom(module_path($moduleName, 'Resources/lang'), $moduleName);
        }
    }

    public function registerRoutes($moduleName)
    {
        $routeDir = File::allFiles(module_path($moduleName, 'Routes'));
        foreach ($routeDir as $key => $value) {
            $this->loadRoutesFrom($value->getPathName());
        }
        $this->mapWebRoutes($moduleName);
        $this->mapApiRoutes($moduleName);
    }

    public function registerRepositories($moduleName)
    {
        try {
            $models = array_map('basename', File::directories("../app_modules/$moduleName/Repositories"));
            foreach ($models as $model) {
                $this->app->bind("Modules\\$moduleName\\Repositories\\{$model}\\{$model}Repository",
                    "Modules\\$moduleName\\Repositories\\{$model}\\{$model}Eloquent");
            }
        } catch (Exception $exception) {
        }
    }

    private function mapWebRoutes($moduleName)
    {
        Route::middleware('web')
            ->namespace("Modules\\$moduleName\Http\Controllers")
            ->group(module_path($moduleName, "Routes/web.php"));
    }

    private function mapApiRoutes($moduleName)
    {
        Route::prefix('api')
            ->middleware('api')
            ->namespace("Modules\\$moduleName\Http\Controllers\Api")
            ->group(module_path($moduleName, "Routes/api.php"));
    }

    private function getPublishableViewPaths($moduleName): array
    {
        $paths = [];
        foreach (Config::get('view.paths') as $path) {
            if (is_dir("$path/modules/$moduleName")) {
                $paths[] = "$path/modules/$moduleName";
            }
        }
        return $paths;
    }
}
